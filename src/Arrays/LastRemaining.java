package Arrays;

/**
 * Created by zb on 2021/6/24 16:32
 *
 * 剑指 Offer 62. 圆圈中最后剩下的数字
 * 0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。
 *
 * 例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
 *
 *
 *
 * 示例 1：
 *
 * 输入: n = 5, m = 3
 * 输出: 3
 *
 *
 *
 * 示例 2：
 *
 * 输入: n = 10, m = 17
 * 输出: 2
 *
 *
 * 限制：
 *
 * 1 <= n <= 10^5
 * 1 <= m <= 10^6
 */
class LastRemaining {

    /**
     * 一、约瑟夫环问题：https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/3857719?fromtitle=%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF&fromid=348830
     *
     * 二、数学公式递推： 假如有5个数【0,1,2,3,4】 规定 第3个的删除则：
     *
     * 第一遍：     数3个，目标数字为2删除， 剩余数组为【0,1,3,4】
     * 第二遍： 接着数3个，目标数字为0删除， 剩余数组为【1,3,4】
     * 第三遍： 接着数3个，目标数字为4删除， 剩余数组为【1,3】
     * 第四遍： 接着数3个，目标数字为1删除， 剩余数组为【3】
     *
     * 反推：
     * 然后我们从最后剩下的 3 倒着看，我们可以反向推出这个数字在之前每个轮次的位置。
     *
     * 第四遍未删除时： 补上m个位置，取模当时数组大小，位置是 （0+3）%2 =1
     * 第3遍未删除时： 补上m个位置，取模当时数组大小，位置是 （1+3）%3 =1
     * ...
     *
     * 得出公式 最后剩余的数ans =  （当前index+ 规则数m）% 上轮剩余总数
     * */
    public static int lastRemaining(int n, int m) {
        int ans = 0;
        // 最后一轮剩下2个人，所以从2开始反推
        for (int i = 2; i <= n; i++) {
            ans = (ans + m) % i;
        }
        return ans;
    }

    public static void main(String[] args) {
        System.out.println(lastRemaining(5,3));
        System.out.println(lastRemaining(10,17));
    }
}
